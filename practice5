
// My solution to Leetcode problem, Cheapest fligtht within K stops
// This problem can be reduced to finding the shortest path with at most K + 1 edges
// We apply the bellman ford algor, with K + 1 iterations, dist[v] would be <= the shortest path with at most K edges
// We reserve the update of distance for the next iteration to get the "worst case"

int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int K) 
{
    // We apply bellman_ford algorithm with K iterations
    vector<long> dist (n, INT32_MAX);
    vector<long> dist_updated = dist;
        
    dist[src] = 0;
    for (int i = 0; i < K + 1; ++i)
    {
        for (int j = 0; j < flights.size(); ++j)
        {
                
            int u = flights[j][0], v = flights[j][1], w = flights[j][2];
            long alt = (long)dist[u] + (long)w;
            if (alt < dist_updated[v])          // Do not update dist[v] until the next iteration to avoid the "best case"
                dist_updated[v] = alt;
        }
            dist = dist_updated;
    }
        
        return (dist[dst] != INT32_MAX) ? dist[dst] : -1;
}


// My solution to leetcode problem, check perfect number
bool checkPerfectNumber(int num) 
{
    vector<int> factors;
    if (num != 1)
        factors.push_back(1);

    int p = 2, q = num;
    while (p < q)
    {
        if (!(num % p))
        {   
            factors.push_back(p);
            q = num / p;
            if (p != q)
                factors.push_back(q);
        }
        ++p;
    }

    int sum = 0;
    for (int i = 0; i < factors.size(); ++i)
        sum += factors[i];

    return num == sum;
}

// reference solution that takes a slightly better approach
// check all integers until sqrt(num)
bool checkPerfectNumber(int num)
{
    if (num == 1)
        return false;

    int sum = 1;
    for (int i = 2; i * i <= num; ++i)
        if (num % i == 0)
        {
            sum += i;
            if (i * i != num)
                sum += num / i;
            if (sum > num)
            return false;
        }

    return sum == num;
}


// We apply binary search to find the peak element in an array
// We find the local slope of the middle element to locate the peak in half the array
int findPeak(vector<int>& nums)
{
    nums.push_back(INT32_MIN);
    return findPeak_rec(nums, 0, nums.size() - 1);
}

int findPeak_rec(vector<int>& nums, int p, int q)
{   
    // slope of p is always positive and slope of q is always negative
    if (q == p + 1)
        return p;

    int mid = (p + q)/2;
    int slope_left = (nums[mid] > nums[mid - 1]) ? 1 : -1;
    int slope_right = (nums[mid + 1] > nums[mid]) ? 1 : -1;
    if (slope_left < 0)
        return findPeak_rec(nums, p, mid);
    else if (slope_right > 0)
        return findPeak_rec(nums, mid + 1, q);
    else // slope_left > 0 and slope_right < 0
        return mid;

}


