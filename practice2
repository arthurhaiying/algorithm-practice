
// my solution to Leetcode problem, minimum path sum
// shortest[x][y] means the length of the shortest path from A[x][y] to A[0][0]
// shortest[x][y] = A[x][y] + min(shortest[x-1][y], shortest[x][y -1]) and we take shortest[m][n]

int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<int> shortest (m * n);
        shortest[0] = grid[0][0];
        
        for (int l = 1; l < m + n - 1; ++l)
        {
            int start = (l < n) ? 0 : l - n + 1;
            int end = (l < m) ? l : (m - 1);
            for (int i = start; i <= end; ++i)
            {
                int j = l - i;
                int up = (i > 0) ? shortest[(i - 1) * n + j] : INT32_MAX;
                int left = (j > 0) ? shortest[i * n + (j - 1)] : INT32_MAX;
                shortest[i * n + j] = grid[i][j] + min(up, left);
                
            }
        }
        
        return shortest[m*n - 1];
    }


// my solution to leetcode problem, queue reconstruction
// sort the people by decreasing height
bool compare(const pair<int, int>& a, const pair<int, int>& b)
{
	return a.first > b.first || (a.first == b.first && a.second < b.second);
}


// before each iteration, people[0: i] are in the correct order and taller than all the rest people
// we then move people[i] to the correct position of the current queue
vector<pair<int, int>> reconstructQueue(vector<pair<int, int>>& people)
{
	vector<pair<int, int>> people_sorted = people;
	sort(people_sorted.begin(), people_sorted.end(), compare);  // sort the people by decreasing height

	int size = people_sorted.size();
	for (int i = 1; i < size; ++i) 
		// before each iteration, people[0: i) are in the correct order and taller than the later people
	{
		pair<int, int> temp = people_sorted[i];
		int pos = temp.second;
		if (pos != i)
		{
			for (int j = i; j > pos; --j)
				people_sorted[j] = people_sorted[j - 1];
			people_sorted[pos] = temp;
		}
	}

	return people_sorted;
}



// Since we are looking for the solution with minimum change of bus, we only need to track whether two bus routes intersect and do not need to worry about the number of stops
// we can view each bus line as a node, where two nodes are connected if two bus routes intersect. 
// we do breadth first seach from the source nodes to the destination nodes (bus lines that contain the destination stop)

int numBusesToDestination(vector<vector<int>>& routes, int S, int T)
{
	int num_buses = routes.size();
	vector<vector<int>> transfer_table (num_buses);
	vector<int> source_buses;
	unordered_set<int> destination_buses;
	vector<int> isBusExplored (num_buses, 0);

	for (int i = 0; i < num_buses; ++i)
	{
		unordered_set<int> stops(routes[i].begin(), routes[i].end());
		for (int j = i + 1; j < num_buses; ++j)
			for (auto it = routes[j].begin(); it != routes[j].end(); ++it)
				if (stops.count(*it))
				{
					transfer_table[i].push_back(j);
					transfer_table[j].push_back(i);
					// bus i can be transferred to bus j by this stop
				}

		if (stops.count(S))
			source_buses.push_back(i);
		if (stops.count(T))
			destination_buses.insert(i);

	}


	queue<bus> q;

	if (S == T)
		return 0;
	// if the source stop and the destination stop are the same stop of bus k
	// then bus k will appear both in source_buses and destination_buses and be counted as length one

    for (auto it = source_buses.begin(); it != source_buses.end(); ++it)
   		q.push((bus) {*it, 1});

   	while(!q.empty())
   	{
   		struct bus temp = q.front();
   		q.pop();
   		if (destination_buses.count(temp.num))
   			return temp.order;
   		isBusExplored[temp.num] = 1;
   		// try to change to another bus
   		for (auto it = transfer_table[temp.num].begin(); it != transfer_table[temp.num].end(); ++it)
   			if (!isBusExplored[*it])
   				q.push_back((bus) {*it, temp.order + 1});
   }

   	return -1;

}