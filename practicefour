
// My solution to leetcode problem, Decode string
string decodeString(string s) 
{   
    int n = s.size();
	stack<element> text_stack;
	text_stack.push((element) {"", 1});

	int i = 0;
	while (i < n)
	{
		if (s[i] != '[' && s[i] != ']' && !isdigit(s[i]))
            text_stack.top().text += s[i];
		else if (isdigit(s[i]))
       	{   
            string num = "";
            while (isdigit(s[i]))
                num += s[i++];
            text_stack.push((element) {"", stoi(num)});
        }
		else if (s[i] == ']')
		{
			element curr = text_stack.top();
			text_stack.pop();
			string decoded_text = "";
			for (int j = 0; j < curr.num; ++j)
				decoded_text += curr.text;
			text_stack.top().text += decoded_text;

		}
            
        i++;
	}

	return text_stack.top().text;
}


// 	My solution to Leetcode probem, Combination Sum
//  We use a recurrent approach and decrease the problem size by one each time
vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>> res;
    hasCombSum(candidates, target, 0, res);
    return res;
}
    
int hasCombSum(vector<int>& candidates, int target, int pos, vector<vector<int>>& combs)
{
	if (pos == candidates.size() && target == 0)
    {
        vector<int> empty;
        combs.push_back(empty);
        return 1;
    }    
    else if (pos == candidates.size()) // target > 0
		return 0;

	int curr = candidates[pos];
	int num = target / curr;
	int ans = 0;
	vector<vector<int>> temp;
	for (int i = 0; i <= num; ++i)
	{
		if (hasCombSum(candidates, target - i * curr, pos + 1, temp))
		{
			ans = 1;
			// retrieve the combinations and append the current elements
			for (auto it = temp.begin(); it != temp.end(); ++it)
			{
				for (int j = 0 ; j < i; ++j)
					it -> push_back(curr);
				combs.push_back(*it);
			}   
		}
		temp.clear();
	}

return ans;

}